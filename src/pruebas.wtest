import juegoAjedrez.*
import wollok.game.*
import main.*
import piezasBlancas.*
import reyNegro.*
import spawn.*

describe "TESTS DE REY NEGRO" {

  test "El rey negro tiene una vida incial" {
    assert.notThat(reyNegro.vida() == 0)
  }

  test "El rey negro obtiene puntaje al matar a un enemigo" {
    const peon = new Peon()
    peon.recibirDanio(peon.vida())
    assert.notThat(reyNegro.puntaje() == 0)
  }

  test "El rey negro recibe danio cuando una pieza llega a la columna del rey" {
    const vidaInicial = reyNegro.vida()
    const peon = new Peon()
    peon.cambiarPosicion(game.at(1, 2))
    peon.moverse()
    assert.notThat(reyNegro.vida() == vidaInicial)
  }

}

describe "TESTS DE PIEZAS BLANCAS" {
  test "La pieza recibe danio cuando recibe un disparo" {
    const peon = new Peon()
    const vidaInicial = peon.vida()
    const bala = new Bala()
    reyNegro.reaccionar(peon, bala)
    assert.notThat(peon.vida() == vidaInicial)
  }

  test "El peon retrocede cuando recibe un disparo" {
    const peon = new Peon()
    const xInicial = peon.position().x()
    const bala = new Bala()
    reyNegro.reaccionar(peon, bala)
    assert.notThat(peon.position().x() == xInicial)
  }

  test "El caballo cambia la imagen cuando recibe un disparo" {
    const caballo = new Caballo()
    const imagenInicial = caballo.image()
    const bala = new Bala()
    reyNegro.reaccionar(caballo, bala)
    assert.notThat(caballo.image() == imagenInicial)
  }

  test "El peon se mueve uno para adelante" {
    const peon = new Peon()
    const xInicial = peon.position().x()
    peon.moverse()
    assert.notThat(peon.position().x() == xInicial)
  }
  
  test "El caballo se mueve uno para delante y uno para arriba o abajo" {
    const caballo = new Caballo()
    const xInicial = caballo.position().x()
    const yInicial = caballo.position().y()
    caballo.moverse()
    assert.notThat(caballo.position().x() == xInicial)
    assert.that(caballo.position().y() == yInicial + 1 || caballo.position().y() == yInicial - 1)
  }

  test "El alfil se mueve para arriba o para abajo y uno para adelante" {
    const alfil = new Alfil()
    const xInicial = alfil.position().x()
    const yInicial = alfil.position().y()
    alfil.moverse()
    assert.notThat(alfil.position().x() == xInicial)
    assert.that(alfil.position().y() == yInicial + 1 || alfil.position().y() == yInicial - 1)
  }

  test "La torre se mueve uno para adelante" {
    const torre = new Torre()
    const xInicial = torre.position().x()
    torre.moverse()
    assert.notEquals(xInicial, torre.position().x())
  }

  test "La reina se mueve igual que el caballo" {
    const reina = new Reina()
    const xInicial = reina.position().x()
    const yInicial = reina.position().y()
    reina.moverse()
    assert.notEquals(xInicial, reina.position().x())
    assert.that(reina.position().y() == yInicial + 1 || reina.position().y() == yInicial - 1)
  }

  test "La reina aumenta el danio cuando le disparan" {
    const reina = new Reina()
    const danioInicial = reina.danio()
    const bala = new Bala()
    reyNegro.reaccionar(reina, bala)
    assert.notEquals(danioInicial, reina.danio())
  }

  test "La pieza desaparece al llegar a la columna del rey" {
    const peon = new Peon()
    peon.cambiarPosicion(game.at(1,2))
    peon.moverse()
    assert.notThat(juegoAjedrez2.listaVisuales().contains(peon))
  }
}
